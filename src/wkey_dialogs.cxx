// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "gettext.h"
#include "wkey_dialogs.h"
#include "support.h"

Fl_ComboBox *selectCommPort=(Fl_ComboBox *)0;

Fl_Return_Button *btn_ser_port_ok=(Fl_Return_Button *)0;

static void cb_btn_ser_port_ok(Fl_Return_Button*, void*) {
  cbOkSetupDialog();
}

Fl_Button *btn_serial_port_cancel=(Fl_Button *)0;

static void cb_btn_serial_port_cancel(Fl_Button*, void*) {
  cbCancelSetupDialog();
}

Fl_Double_Window* SetupDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(274, 78, _("Select Serial Port"));
    w = o;
    { selectCommPort = new Fl_ComboBox(75, 13, 190, 23, _("Ser. Port"));
      selectCommPort->tooltip(_("Xcvr serial port"));
      selectCommPort->box(FL_DOWN_BOX);
      selectCommPort->color((Fl_Color)53);
      selectCommPort->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      selectCommPort->labeltype(FL_NORMAL_LABEL);
      selectCommPort->labelfont(0);
      selectCommPort->labelsize(14);
      selectCommPort->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      selectCommPort->align(FL_ALIGN_LEFT);
      selectCommPort->when(FL_WHEN_RELEASE);
      selectCommPort->end();
    } // Fl_ComboBox* selectCommPort
    { btn_ser_port_ok = new Fl_Return_Button(198, 46, 67, 20, _("OK"));
      btn_ser_port_ok->callback((Fl_Callback*)cb_btn_ser_port_ok);
    } // Fl_Return_Button* btn_ser_port_ok
    { btn_serial_port_cancel = new Fl_Button(120, 47, 70, 20, _("Cancel"));
      btn_serial_port_cancel->callback((Fl_Callback*)cb_btn_serial_port_cancel);
    } // Fl_Button* btn_serial_port_cancel
    o->end();
  } // Fl_Double_Window* o
  return w;
}

static void cb_mnu_exit(Fl_Menu_*, void*) {
  cbExit();
}

static void cb_mnu_sel_port(Fl_Menu_*, void*) {
  config_comm_port();
}

static void cb_mnu_parameters(Fl_Menu_*, void*) {
  config_parameters();
}

static void cb_mnu_messages(Fl_Menu_*, void*) {
  config_messages();
}

static void cb_mnu_operator(Fl_Menu_*, void*) {
  open_operator_dialog();
}

static void cb_mnu_display_log(Fl_Menu_*, void*) {
  cb_mnuShowLogbook();
}

static void cb_mnu_new_log(Fl_Menu_*, void*) {
  cb_mnuNewLogbook();
}

static void cb_mnu_open_logbook(Fl_Menu_*, void*) {
  cb_mnuOpenLogbook();
}

static void cb_mnu_save_logbook(Fl_Menu_*, void*) {
  cb_mnuSaveLogbook();
}

static void cb_mnu_merge_logbook(Fl_Menu_*, void*) {
  cb_mnuMergeADIF_log();
}

static void cb_mnu_export_adif(Fl_Menu_*, void*) {
  cb_mnuExportADIF_log();
}

static void cb_mnu_export_logbook_text(Fl_Menu_*, void*) {
  cb_mnuExportTEXT_log();
}

static void cb_mnu_export_logbook_csv(Fl_Menu_*, void*) {
  cb_mnuExportCSV_log();
}

static void cb_mnu_export_cabrillo(Fl_Menu_*, void*) {
  cb_Export_Cabrillo();
}

static void cb_mnu_contest(Fl_Menu_*, void*) {
  cb_contest();
}

static void cb_mnu_events(Fl_Menu_*, void*) {
  cb_events();
}

static void cb_mnu_about(Fl_Menu_*, void*) {
  about();
}

static void cb_mnu_on_line_help(Fl_Menu_*, void*) {
  on_line_help();
}

Fl_Menu_Item menu_[] = {
 {_("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("E&xit"), 0,  (Fl_Callback*)cb_mnu_exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Configure"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Select Port"), 0,  (Fl_Callback*)cb_mnu_sel_port, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Parameters"), 0,  (Fl_Callback*)cb_mnu_parameters, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Messages"), 0,  (Fl_Callback*)cb_mnu_messages, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Operator"), 0,  (Fl_Callback*)cb_mnu_operator, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Logbook"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Display Log"), 0,  (Fl_Callback*)cb_mnu_display_log, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("New"), 0,  (Fl_Callback*)cb_mnu_new_log, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Open"), 0,  (Fl_Callback*)cb_mnu_open_logbook, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save"), 0,  (Fl_Callback*)cb_mnu_save_logbook, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Merge Log"), 0,  (Fl_Callback*)cb_mnu_merge_logbook, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export Log"), 0,  (Fl_Callback*)cb_mnu_export_adif, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export text"), 0,  (Fl_Callback*)cb_mnu_export_logbook_text, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Export CSV"), 0,  (Fl_Callback*)cb_mnu_export_logbook_csv, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Cabrillo Report"), 0,  (Fl_Callback*)cb_mnu_export_cabrillo, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Contest"), 0,  (Fl_Callback*)cb_mnu_contest, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Events"), 0,  (Fl_Callback*)cb_mnu_events, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("About"), 0,  (Fl_Callback*)cb_mnu_about, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("On line help"), 0,  (Fl_Callback*)cb_mnu_on_line_help, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

FTextView *txt_sent=(FTextView *)0;

FTextTX *txt_to_send=(FTextTX *)0;

Fl_Light_Button *btn_send=(Fl_Light_Button *)0;

static void cb_btn_send(Fl_Light_Button*, void*) {
  cb_send_button();
}

Fl_Light_Button *btn_tune=(Fl_Light_Button *)0;

static void cb_btn_tune(Fl_Light_Button*, void*) {
  cb_tune();
}

Fl_Button *btn_cancel=(Fl_Button *)0;

static void cb_btn_cancel(Fl_Button*, void*) {
  cb_cancel_transmit();
}

Fl_Box *box_busy=(Fl_Box *)0;

Fl_Box *box_keydown=(Fl_Box *)0;

Fl_Box *box_break_in=(Fl_Box *)0;

Fl_Box *box_xoff=(Fl_Box *)0;

Fl_Box *box_wait=(Fl_Box *)0;

Fl_Output *txt_wpm=(Fl_Output *)0;

Fl_Counter *cntr_wpm=(Fl_Counter *)0;

static void cb_cntr_wpm(Fl_Counter*, void*) {
  set_wpm();
}

Fl_Check_Button *btn_use_pot=(Fl_Check_Button *)0;

static void cb_btn_use_pot(Fl_Check_Button*, void*) {
  use_pot_changed();
}

Fl_Button *btn_msg1=(Fl_Button *)0;

static void cb_btn_msg1(Fl_Button*, void*) {
  exec_msg1();
}

Fl_Button *btn_msg2=(Fl_Button *)0;

static void cb_btn_msg2(Fl_Button*, void*) {
  exec_msg2();
}

Fl_Button *btn_msg3=(Fl_Button *)0;

static void cb_btn_msg3(Fl_Button*, void*) {
  exec_msg3();
}

Fl_Button *btn_msg4=(Fl_Button *)0;

static void cb_btn_msg4(Fl_Button*, void*) {
  exec_msg4();
}

Fl_Button *btn_msg5=(Fl_Button *)0;

static void cb_btn_msg5(Fl_Button*, void*) {
  exec_msg5();
}

Fl_Button *btn_msg6=(Fl_Button *)0;

static void cb_btn_msg6(Fl_Button*, void*) {
  exec_msg6();
}

Fl_Button *btn_msg7=(Fl_Button *)0;

static void cb_btn_msg7(Fl_Button*, void*) {
  exec_msg7();
}

Fl_Button *btn_msg8=(Fl_Button *)0;

static void cb_btn_msg8(Fl_Button*, void*) {
  exec_msg8();
}

Fl_Button *btn_msg9=(Fl_Button *)0;

static void cb_btn_msg9(Fl_Button*, void*) {
  exec_msg9();
}

Fl_Button *btn_msg10=(Fl_Button *)0;

static void cb_btn_msg10(Fl_Button*, void*) {
  exec_msg10();
}

Fl_Input2 *txt_sta=(Fl_Input2 *)0;

static void cb_txt_sta(Fl_Input2*, void*) {
  check_call();
}

Fl_Input2 *txt_name=(Fl_Input2 *)0;

Fl_Button *btn_log_it=(Fl_Button *)0;

static void cb_btn_log_it(Fl_Button*, void*) {
  AddRecord();
txt_sta->take_focus();
}

Fl_Input2 *txt_xchg=(Fl_Input2 *)0;

Fl_Button *btn_clear=(Fl_Button *)0;

static void cb_btn_clear(Fl_Button*, void*) {
  txt_sta->value("");
txt_name->value("");
txt_xchg->value("");
txt_sta->color(FL_BACKGROUND2_COLOR);
txt_sta->take_focus();
}

Fl_Double_Window* WKey_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(600, 279, _("Fl_WinKey"));
    w = o;
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 600, 20);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { txt_sent = new FTextView(5, 23, 590, 96);
      txt_sent->type(12);
      txt_sent->box(FL_DOWN_BOX);
      txt_sent->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_sent->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_sent->labeltype(FL_NORMAL_LABEL);
      txt_sent->labelfont(0);
      txt_sent->labelsize(14);
      txt_sent->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_sent->align(FL_ALIGN_LEFT);
      txt_sent->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(txt_sent);
    } // FTextView* txt_sent
    { txt_to_send = new FTextTX(5, 121, 590, 68, _("input:"));
      txt_to_send->type(4);
      txt_to_send->box(FL_DOWN_BOX);
      txt_to_send->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_to_send->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_to_send->labeltype(FL_NORMAL_LABEL);
      txt_to_send->labelfont(0);
      txt_to_send->labelsize(14);
      txt_to_send->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_to_send->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      txt_to_send->when(FL_WHEN_CHANGED);
    } // FTextTX* txt_to_send
    { btn_send = new Fl_Light_Button(535, 221, 60, 25, _("Send"));
      btn_send->callback((Fl_Callback*)cb_btn_send);
    } // Fl_Light_Button* btn_send
    { btn_tune = new Fl_Light_Button(535, 250, 60, 25, _("Tune"));
      btn_tune->selection_color((Fl_Color)5);
      btn_tune->callback((Fl_Callback*)cb_btn_tune);
    } // Fl_Light_Button* btn_tune
    { btn_cancel = new Fl_Button(472, 221, 60, 25, _("Cancel"));
      btn_cancel->callback((Fl_Callback*)cb_btn_cancel);
    } // Fl_Button* btn_cancel
    { box_busy = new Fl_Box(7, 241, 16, 16, _("Busy"));
      box_busy->box(FL_DIAMOND_DOWN_BOX);
      box_busy->align(FL_ALIGN_RIGHT);
    } // Fl_Box* box_busy
    { box_keydown = new Fl_Box(7, 260, 16, 16, _("Key"));
      box_keydown->box(FL_DIAMOND_DOWN_BOX);
      box_keydown->align(FL_ALIGN_RIGHT);
    } // Fl_Box* box_keydown
    { box_break_in = new Fl_Box(64, 222, 16, 16, _("Bk"));
      box_break_in->box(FL_DIAMOND_DOWN_BOX);
      box_break_in->align(FL_ALIGN_RIGHT);
    } // Fl_Box* box_break_in
    { box_xoff = new Fl_Box(64, 241, 16, 16, _("Bfr"));
      box_xoff->box(FL_DIAMOND_DOWN_BOX);
      box_xoff->align(FL_ALIGN_RIGHT);
    } // Fl_Box* box_xoff
    { box_wait = new Fl_Box(7, 222, 16, 16, _("Wait"));
      box_wait->box(FL_DIAMOND_DOWN_BOX);
      box_wait->align(FL_ALIGN_RIGHT);
    } // Fl_Box* box_wait
    { txt_wpm = new Fl_Output(165, 251, 38, 22);
    } // Fl_Output* txt_wpm
    { cntr_wpm = new Fl_Counter(151, 222, 64, 22, _("WPM"));
      cntr_wpm->tooltip(_("flwkey WPM"));
      cntr_wpm->type(1);
      cntr_wpm->minimum(10);
      cntr_wpm->maximum(35);
      cntr_wpm->step(1);
      cntr_wpm->value(20);
      cntr_wpm->callback((Fl_Callback*)cb_cntr_wpm);
      cntr_wpm->align(FL_ALIGN_LEFT);
    } // Fl_Counter* cntr_wpm
    { btn_use_pot = new Fl_Check_Button(145, 255, 20, 15, _("Pot"));
      btn_use_pot->tooltip(_("Winkeyer pot controls WPM"));
      btn_use_pot->down_box(FL_DOWN_BOX);
      btn_use_pot->callback((Fl_Callback*)cb_btn_use_pot);
      btn_use_pot->align(FL_ALIGN_LEFT);
      btn_use_pot->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* btn_use_pot
    { btn_msg1 = new Fl_Button(4, 197, 56, 20, _("Msg1"));
      btn_msg1->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg1->callback((Fl_Callback*)cb_btn_msg1);
    } // Fl_Button* btn_msg1
    { btn_msg2 = new Fl_Button(63, 197, 56, 20, _("Msg2"));
      btn_msg2->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg2->callback((Fl_Callback*)cb_btn_msg2);
    } // Fl_Button* btn_msg2
    { btn_msg3 = new Fl_Button(122, 197, 56, 20, _("Msg3"));
      btn_msg3->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg3->callback((Fl_Callback*)cb_btn_msg3);
    } // Fl_Button* btn_msg3
    { btn_msg4 = new Fl_Button(182, 197, 56, 20, _("Msg4"));
      btn_msg4->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg4->callback((Fl_Callback*)cb_btn_msg4);
    } // Fl_Button* btn_msg4
    { btn_msg5 = new Fl_Button(241, 197, 56, 20, _("Msg5"));
      btn_msg5->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg5->callback((Fl_Callback*)cb_btn_msg5);
    } // Fl_Button* btn_msg5
    { btn_msg6 = new Fl_Button(300, 197, 56, 20, _("Msg6"));
      btn_msg6->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg6->callback((Fl_Callback*)cb_btn_msg6);
    } // Fl_Button* btn_msg6
    { btn_msg7 = new Fl_Button(360, 197, 56, 20, _("Msg7"));
      btn_msg7->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg7->callback((Fl_Callback*)cb_btn_msg7);
    } // Fl_Button* btn_msg7
    { btn_msg8 = new Fl_Button(419, 197, 56, 20, _("Msg8"));
      btn_msg8->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg8->callback((Fl_Callback*)cb_btn_msg8);
    } // Fl_Button* btn_msg8
    { btn_msg9 = new Fl_Button(478, 197, 56, 20, _("Msg9"));
      btn_msg9->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg9->callback((Fl_Callback*)cb_btn_msg9);
    } // Fl_Button* btn_msg9
    { btn_msg10 = new Fl_Button(538, 197, 56, 20, _("Msg10"));
      btn_msg10->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg10->callback((Fl_Callback*)cb_btn_msg10);
    } // Fl_Button* btn_msg10
    { txt_sta = new Fl_Input2(255, 222, 80, 22, _("STA"));
      txt_sta->tooltip(_("Other station"));
      txt_sta->box(FL_DOWN_BOX);
      txt_sta->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_sta->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_sta->labeltype(FL_NORMAL_LABEL);
      txt_sta->labelfont(0);
      txt_sta->labelsize(14);
      txt_sta->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_sta->callback((Fl_Callback*)cb_txt_sta);
      txt_sta->align(FL_ALIGN_LEFT);
      txt_sta->when(FL_WHEN_CHANGED);
    } // Fl_Input2* txt_sta
    { txt_name = new Fl_Input2(382, 222, 80, 22, _("NAM"));
      txt_name->tooltip(_("Other operator"));
      txt_name->box(FL_DOWN_BOX);
      txt_name->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_name->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_name->labeltype(FL_NORMAL_LABEL);
      txt_name->labelfont(0);
      txt_name->labelsize(14);
      txt_name->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_name->align(FL_ALIGN_LEFT);
      txt_name->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_name
    { btn_log_it = new Fl_Button(413, 250, 50, 25, _("Log"));
      btn_log_it->callback((Fl_Callback*)cb_btn_log_it);
    } // Fl_Button* btn_log_it
    { txt_xchg = new Fl_Input2(255, 251, 100, 22, _("X_in"));
      txt_xchg->tooltip(_("Rcvd Contest Exchange"));
      txt_xchg->box(FL_DOWN_BOX);
      txt_xchg->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_xchg->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_xchg->labeltype(FL_NORMAL_LABEL);
      txt_xchg->labelfont(0);
      txt_xchg->labelsize(14);
      txt_xchg->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_xchg->align(FL_ALIGN_LEFT);
      txt_xchg->when(FL_WHEN_CHANGED);
    } // Fl_Input2* txt_xchg
    { btn_clear = new Fl_Button(358, 250, 50, 25, _("Clear"));
      btn_clear->callback((Fl_Callback*)cb_btn_clear);
    } // Fl_Button* btn_clear
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Check_Button *btn_swap=(Fl_Check_Button *)0;

static void cb_btn_swap(Fl_Check_Button*, void*) {
  change_btn_swap();
}

Fl_Check_Button *btn_auto_space=(Fl_Check_Button *)0;

static void cb_btn_auto_space(Fl_Check_Button*, void*) {
  change_btn_auto_space();
}

Fl_Check_Button *btn_ct_space=(Fl_Check_Button *)0;

static void cb_btn_ct_space(Fl_Check_Button*, void*) {
  change_btn_ct_space();
}

Fl_Check_Button *btn_paddledog=(Fl_Check_Button *)0;

static void cb_btn_paddledog(Fl_Check_Button*, void*) {
  change_btn_paddledog();
}

Fl_Check_Button *btn_cut_zeronine=(Fl_Check_Button *)0;

static void cb_btn_cut_zeronine(Fl_Check_Button*, void*) {
  change_btn_cut_zeronine();
}

Fl_Check_Button *btn_paddle_echo=(Fl_Check_Button *)0;

static void cb_btn_paddle_echo(Fl_Check_Button*, void*) {
  change_btn_paddle_echo();
}

Fl_Check_Button *btn_serial_echo=(Fl_Check_Button *)0;

static void cb_btn_serial_echo(Fl_Check_Button*, void*) {
  change_btn_serial_echo();
}

Fl_Check_Button *btn_sidetone_on=(Fl_Check_Button *)0;

static void cb_btn_sidetone_on(Fl_Check_Button*, void*) {
  change_btn_sidetone_on();
}

Fl_Check_Button *btn_tone_on=(Fl_Check_Button *)0;

static void cb_btn_tone_on(Fl_Check_Button*, void*) {
  change_btn_tone_on();
}

Fl_Check_Button *btn_ptt_on=(Fl_Check_Button *)0;

static void cb_btn_ptt_on(Fl_Check_Button*, void*) {
  change_btn_ptt_on();
}

Fl_Counter *cntr_min_wpm=(Fl_Counter *)0;

static void cb_cntr_min_wpm(Fl_Counter*, void*) {
  change_cntr_min_wpm();
}

Fl_Counter *cntr_rng_wpm=(Fl_Counter *)0;

static void cb_cntr_rng_wpm(Fl_Counter*, void*) {
  change_cntr_rng_wpm();
}

Fl_Counter *cntr_farnsworth=(Fl_Counter *)0;

static void cb_cntr_farnsworth(Fl_Counter*, void*) {
  change_cntr_farnsworth();
}

Fl_Counter *cntr_cmd_wpm=(Fl_Counter *)0;

static void cb_cntr_cmd_wpm(Fl_Counter*, void*) {
  change_cntr_cmd_wpm();
}

Fl_Counter *cntr_ratio=(Fl_Counter *)0;

static void cb_cntr_ratio(Fl_Counter*, void*) {
  change_cntr_ratio();
}

Fl_Counter *cntr_comp=(Fl_Counter *)0;

static void cb_cntr_comp(Fl_Counter*, void*) {
  change_cntr_comp();
}

Fl_Counter *cntr_first_ext=(Fl_Counter *)0;

static void cb_cntr_first_ext(Fl_Counter*, void*) {
  change_cntr_first_ext();
}

Fl_Counter *cntr_sample=(Fl_Counter *)0;

static void cb_cntr_sample(Fl_Counter*, void*) {
  change_cntr_sample();
}

Fl_Counter *cntr_weight=(Fl_Counter *)0;

static void cb_cntr_weight(Fl_Counter*, void*) {
  change_cntr_weight();
}

Fl_Counter *cntr_leadin=(Fl_Counter *)0;

static void cb_cntr_leadin(Fl_Counter*, void*) {
  change_cntr_leadin();
}

Fl_Counter *cntr_tail=(Fl_Counter *)0;

static void cb_cntr_tail(Fl_Counter*, void*) {
  change_cntr_tail();
}

Fl_ComboBox *choice_keyer_mode=(Fl_ComboBox *)0;

static void cb_choice_keyer_mode(Fl_ComboBox*, void*) {
  change_choice_keyer_mode();
}

Fl_ComboBox *choice_hang=(Fl_ComboBox *)0;

static void cb_choice_hang(Fl_ComboBox*, void*) {
  change_choice_hang();
}

Fl_ComboBox *choice_sidetone=(Fl_ComboBox *)0;

static void cb_choice_sidetone(Fl_ComboBox*, void*) {
  change_choice_sidetone();
}

Fl_ComboBox *choice_output_pins=(Fl_ComboBox *)0;

static void cb_choice_output_pins(Fl_ComboBox*, void*) {
  change_choice_output_pins();
}

Fl_Button *btn_done_parameters=(Fl_Button *)0;

static void cb_btn_done_parameters(Fl_Button*, void*) {
  done_parameters();
}

Fl_Double_Window* make_parameters_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(515, 232, _("WKeyer Parameters"));
    w = o;
    { Fl_Group* o = new Fl_Group(5, 23, 115, 114, _("ModeReg"));
      o->box(FL_ENGRAVED_FRAME);
      { btn_swap = new Fl_Check_Button(15, 31, 70, 15, _("Swap"));
        btn_swap->down_box(FL_DOWN_BOX);
        btn_swap->callback((Fl_Callback*)cb_btn_swap);
      } // Fl_Check_Button* btn_swap
      { btn_auto_space = new Fl_Check_Button(15, 51, 70, 15, _("Auto Space"));
        btn_auto_space->down_box(FL_DOWN_BOX);
        btn_auto_space->callback((Fl_Callback*)cb_btn_auto_space);
      } // Fl_Check_Button* btn_auto_space
      { btn_ct_space = new Fl_Check_Button(15, 72, 70, 15, _("CT space"));
        btn_ct_space->down_box(FL_DOWN_BOX);
        btn_ct_space->callback((Fl_Callback*)cb_btn_ct_space);
      } // Fl_Check_Button* btn_ct_space
      { btn_paddledog = new Fl_Check_Button(15, 92, 70, 15, _("Paddle Dog"));
        btn_paddledog->down_box(FL_DOWN_BOX);
        btn_paddledog->callback((Fl_Callback*)cb_btn_paddledog);
      } // Fl_Check_Button* btn_paddledog
      { btn_cut_zeronine = new Fl_Check_Button(15, 113, 70, 15, _("Cut 0/9"));
        btn_cut_zeronine->down_box(FL_DOWN_BOX);
        btn_cut_zeronine->callback((Fl_Callback*)cb_btn_cut_zeronine);
      } // Fl_Check_Button* btn_cut_zeronine
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(122, 23, 115, 114, _("ModeReg"));
      o->box(FL_ENGRAVED_FRAME);
      { btn_paddle_echo = new Fl_Check_Button(128, 31, 70, 15, _("Paddle echo"));
        btn_paddle_echo->down_box(FL_DOWN_BOX);
        btn_paddle_echo->callback((Fl_Callback*)cb_btn_paddle_echo);
      } // Fl_Check_Button* btn_paddle_echo
      { btn_serial_echo = new Fl_Check_Button(128, 51, 70, 15, _("Serial echo"));
        btn_serial_echo->down_box(FL_DOWN_BOX);
        btn_serial_echo->callback((Fl_Callback*)cb_btn_serial_echo);
      } // Fl_Check_Button* btn_serial_echo
      { btn_sidetone_on = new Fl_Check_Button(128, 71, 103, 15, _("Tone Keyer"));
        btn_sidetone_on->down_box(FL_DOWN_BOX);
        btn_sidetone_on->callback((Fl_Callback*)cb_btn_sidetone_on);
      } // Fl_Check_Button* btn_sidetone_on
      { btn_tone_on = new Fl_Check_Button(128, 92, 87, 15, _("Tone ON"));
        btn_tone_on->down_box(FL_DOWN_BOX);
        btn_tone_on->callback((Fl_Callback*)cb_btn_tone_on);
      } // Fl_Check_Button* btn_tone_on
      { btn_ptt_on = new Fl_Check_Button(128, 113, 87, 15, _("PTT ON"));
        btn_ptt_on->down_box(FL_DOWN_BOX);
        btn_ptt_on->callback((Fl_Callback*)cb_btn_ptt_on);
      } // Fl_Check_Button* btn_ptt_on
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(240, 23, 112, 165, _("WPM Settings"));
      o->box(FL_ENGRAVED_FRAME);
      { cntr_min_wpm = new Fl_Counter(261, 31, 64, 20, _("Min WPM"));
        cntr_min_wpm->type(1);
        cntr_min_wpm->step(0.1);
        cntr_min_wpm->callback((Fl_Callback*)cb_cntr_min_wpm);
      } // Fl_Counter* cntr_min_wpm
      { cntr_rng_wpm = new Fl_Counter(261, 68, 64, 20, _("Rng WPM"));
        cntr_rng_wpm->type(1);
        cntr_rng_wpm->step(0.1);
        cntr_rng_wpm->callback((Fl_Callback*)cb_cntr_rng_wpm);
      } // Fl_Counter* cntr_rng_wpm
      { cntr_farnsworth = new Fl_Counter(261, 105, 64, 20, _("Farsnworth"));
        cntr_farnsworth->type(1);
        cntr_farnsworth->step(0.1);
        cntr_farnsworth->callback((Fl_Callback*)cb_cntr_farnsworth);
      } // Fl_Counter* cntr_farnsworth
      { cntr_cmd_wpm = new Fl_Counter(261, 143, 64, 20, _("Cmd WPM"));
        cntr_cmd_wpm->type(1);
        cntr_cmd_wpm->step(0.1);
        cntr_cmd_wpm->callback((Fl_Callback*)cb_cntr_cmd_wpm);
      } // Fl_Counter* cntr_cmd_wpm
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(353, 23, 159, 165, _("Timing/Settings"));
      o->box(FL_ENGRAVED_FRAME);
      { cntr_ratio = new Fl_Counter(365, 31, 64, 20, _("Ratio"));
        cntr_ratio->type(1);
        cntr_ratio->step(0.1);
        cntr_ratio->callback((Fl_Callback*)cb_cntr_ratio);
      } // Fl_Counter* cntr_ratio
      { cntr_comp = new Fl_Counter(365, 68, 64, 20, _("Comp"));
        cntr_comp->type(1);
        cntr_comp->step(0.1);
        cntr_comp->callback((Fl_Callback*)cb_cntr_comp);
      } // Fl_Counter* cntr_comp
      { cntr_first_ext = new Fl_Counter(365, 105, 64, 20, _("1st Ext"));
        cntr_first_ext->type(1);
        cntr_first_ext->step(0.1);
        cntr_first_ext->callback((Fl_Callback*)cb_cntr_first_ext);
      } // Fl_Counter* cntr_first_ext
      { cntr_sample = new Fl_Counter(365, 143, 64, 20, _("Sample"));
        cntr_sample->type(1);
        cntr_sample->step(0.1);
        cntr_sample->callback((Fl_Callback*)cb_cntr_sample);
      } // Fl_Counter* cntr_sample
      { cntr_weight = new Fl_Counter(436, 31, 64, 20, _("Weight"));
        cntr_weight->type(1);
        cntr_weight->step(0.1);
        cntr_weight->callback((Fl_Callback*)cb_cntr_weight);
      } // Fl_Counter* cntr_weight
      { cntr_leadin = new Fl_Counter(436, 68, 64, 20, _("Leadin"));
        cntr_leadin->type(1);
        cntr_leadin->step(0.1);
        cntr_leadin->callback((Fl_Callback*)cb_cntr_leadin);
      } // Fl_Counter* cntr_leadin
      { cntr_tail = new Fl_Counter(436, 105, 64, 20, _("Tail"));
        cntr_tail->type(1);
        cntr_tail->step(0.1);
        cntr_tail->callback((Fl_Callback*)cb_cntr_tail);
      } // Fl_Counter* cntr_tail
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 138, 232, 90);
      o->box(FL_ENGRAVED_FRAME);
      { choice_keyer_mode = new Fl_ComboBox(20, 143, 90, 22, _("Keyer Mode"));
        choice_keyer_mode->box(FL_BORDER_BOX);
        choice_keyer_mode->color((Fl_Color)FL_BACKGROUND_COLOR);
        choice_keyer_mode->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        choice_keyer_mode->labeltype(FL_NORMAL_LABEL);
        choice_keyer_mode->labelfont(0);
        choice_keyer_mode->labelsize(14);
        choice_keyer_mode->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        choice_keyer_mode->callback((Fl_Callback*)cb_choice_keyer_mode);
        choice_keyer_mode->align(FL_ALIGN_BOTTOM);
        choice_keyer_mode->when(FL_WHEN_RELEASE);
        choice_keyer_mode->end();
      } // Fl_ComboBox* choice_keyer_mode
      { choice_hang = new Fl_ComboBox(130, 143, 90, 22, _("Hang"));
        choice_hang->box(FL_BORDER_BOX);
        choice_hang->color((Fl_Color)FL_BACKGROUND_COLOR);
        choice_hang->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        choice_hang->labeltype(FL_NORMAL_LABEL);
        choice_hang->labelfont(0);
        choice_hang->labelsize(14);
        choice_hang->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        choice_hang->callback((Fl_Callback*)cb_choice_hang);
        choice_hang->align(FL_ALIGN_BOTTOM);
        choice_hang->when(FL_WHEN_RELEASE);
        choice_hang->end();
      } // Fl_ComboBox* choice_hang
      { choice_sidetone = new Fl_ComboBox(20, 185, 90, 22, _("Sidetone"));
        choice_sidetone->box(FL_BORDER_BOX);
        choice_sidetone->color((Fl_Color)FL_BACKGROUND_COLOR);
        choice_sidetone->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        choice_sidetone->labeltype(FL_NORMAL_LABEL);
        choice_sidetone->labelfont(0);
        choice_sidetone->labelsize(14);
        choice_sidetone->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        choice_sidetone->callback((Fl_Callback*)cb_choice_sidetone);
        choice_sidetone->align(FL_ALIGN_BOTTOM);
        choice_sidetone->when(FL_WHEN_RELEASE);
        choice_sidetone->end();
      } // Fl_ComboBox* choice_sidetone
      { choice_output_pins = new Fl_ComboBox(130, 185, 90, 22, _("Output PIns"));
        choice_output_pins->box(FL_BORDER_BOX);
        choice_output_pins->color((Fl_Color)FL_BACKGROUND_COLOR);
        choice_output_pins->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        choice_output_pins->labeltype(FL_NORMAL_LABEL);
        choice_output_pins->labelfont(0);
        choice_output_pins->labelsize(14);
        choice_output_pins->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        choice_output_pins->callback((Fl_Callback*)cb_choice_output_pins);
        choice_output_pins->align(FL_ALIGN_BOTTOM);
        choice_output_pins->when(FL_WHEN_RELEASE);
        choice_output_pins->end();
      } // Fl_ComboBox* choice_output_pins
      o->end();
    } // Fl_Group* o
    { btn_done_parameters = new Fl_Button(411, 194, 75, 27, _("Done"));
      btn_done_parameters->callback((Fl_Callback*)cb_btn_done_parameters);
    } // Fl_Button* btn_done_parameters
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Input2 *label_1=(Fl_Input2 *)0;

Fl_Input2 *edit_msg1=(Fl_Input2 *)0;

Fl_Input2 *label_2=(Fl_Input2 *)0;

Fl_Input2 *edit_msg2=(Fl_Input2 *)0;

Fl_Input2 *label_3=(Fl_Input2 *)0;

Fl_Input2 *edit_msg3=(Fl_Input2 *)0;

Fl_Input2 *label_4=(Fl_Input2 *)0;

Fl_Input2 *edit_msg4=(Fl_Input2 *)0;

Fl_Input2 *label_5=(Fl_Input2 *)0;

Fl_Input2 *edit_msg5=(Fl_Input2 *)0;

Fl_Input2 *label_6=(Fl_Input2 *)0;

Fl_Input2 *edit_msg6=(Fl_Input2 *)0;

Fl_Input2 *label_7=(Fl_Input2 *)0;

Fl_Input2 *edit_msg7=(Fl_Input2 *)0;

Fl_Input2 *label_8=(Fl_Input2 *)0;

Fl_Input2 *edit_msg8=(Fl_Input2 *)0;

Fl_Input2 *label_9=(Fl_Input2 *)0;

Fl_Input2 *edit_msg9=(Fl_Input2 *)0;

Fl_Input2 *label_10=(Fl_Input2 *)0;

Fl_Input2 *edit_msg10=(Fl_Input2 *)0;

Fl_Button *btn_done_edit=(Fl_Button *)0;

static void cb_btn_done_edit(Fl_Button*, void*) {
  done_edit();
}

Fl_Button *btn_cancel_edit=(Fl_Button *)0;

static void cb_btn_cancel_edit(Fl_Button*, void*) {
  cancel_edit();
}

Fl_Button *btn_apply_edit=(Fl_Button *)0;

static void cb_btn_apply_edit(Fl_Button*, void*) {
  apply_edit();
}

Fl_Double_Window* make_message_editor() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(600, 324, _("Message Editor"));
    w = o;
    { label_1 = new Fl_Input2(30, 35, 50, 25, _("1:"));
      label_1->box(FL_DOWN_BOX);
      label_1->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_1->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_1->labeltype(FL_NORMAL_LABEL);
      label_1->labelfont(0);
      label_1->labelsize(14);
      label_1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_1->align(FL_ALIGN_LEFT);
      label_1->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_1
    { edit_msg1 = new Fl_Input2(85, 35, 375, 25);
      edit_msg1->box(FL_DOWN_BOX);
      edit_msg1->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg1->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg1->labeltype(FL_NORMAL_LABEL);
      edit_msg1->labelfont(0);
      edit_msg1->labelsize(14);
      edit_msg1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg1->align(FL_ALIGN_LEFT);
      edit_msg1->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg1
    { label_2 = new Fl_Input2(30, 63, 50, 25, _("2:"));
      label_2->box(FL_DOWN_BOX);
      label_2->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_2->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_2->labeltype(FL_NORMAL_LABEL);
      label_2->labelfont(0);
      label_2->labelsize(14);
      label_2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_2->align(FL_ALIGN_LEFT);
      label_2->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_2
    { edit_msg2 = new Fl_Input2(85, 63, 375, 25);
      edit_msg2->box(FL_DOWN_BOX);
      edit_msg2->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg2->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg2->labeltype(FL_NORMAL_LABEL);
      edit_msg2->labelfont(0);
      edit_msg2->labelsize(14);
      edit_msg2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg2->align(FL_ALIGN_LEFT);
      edit_msg2->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg2
    { label_3 = new Fl_Input2(30, 92, 50, 25, _("3:"));
      label_3->box(FL_DOWN_BOX);
      label_3->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_3->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_3->labeltype(FL_NORMAL_LABEL);
      label_3->labelfont(0);
      label_3->labelsize(14);
      label_3->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_3->align(FL_ALIGN_LEFT);
      label_3->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_3
    { edit_msg3 = new Fl_Input2(85, 92, 375, 25);
      edit_msg3->box(FL_DOWN_BOX);
      edit_msg3->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg3->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg3->labeltype(FL_NORMAL_LABEL);
      edit_msg3->labelfont(0);
      edit_msg3->labelsize(14);
      edit_msg3->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg3->align(FL_ALIGN_LEFT);
      edit_msg3->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg3
    { label_4 = new Fl_Input2(30, 121, 50, 25, _("4:"));
      label_4->box(FL_DOWN_BOX);
      label_4->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_4->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_4->labeltype(FL_NORMAL_LABEL);
      label_4->labelfont(0);
      label_4->labelsize(14);
      label_4->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_4->align(FL_ALIGN_LEFT);
      label_4->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_4
    { edit_msg4 = new Fl_Input2(85, 121, 375, 25);
      edit_msg4->box(FL_DOWN_BOX);
      edit_msg4->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg4->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg4->labeltype(FL_NORMAL_LABEL);
      edit_msg4->labelfont(0);
      edit_msg4->labelsize(14);
      edit_msg4->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg4->align(FL_ALIGN_LEFT);
      edit_msg4->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg4
    { label_5 = new Fl_Input2(30, 149, 50, 25, _("5:"));
      label_5->box(FL_DOWN_BOX);
      label_5->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_5->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_5->labeltype(FL_NORMAL_LABEL);
      label_5->labelfont(0);
      label_5->labelsize(14);
      label_5->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_5->align(FL_ALIGN_LEFT);
      label_5->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_5
    { edit_msg5 = new Fl_Input2(85, 149, 375, 25);
      edit_msg5->box(FL_DOWN_BOX);
      edit_msg5->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg5->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg5->labeltype(FL_NORMAL_LABEL);
      edit_msg5->labelfont(0);
      edit_msg5->labelsize(14);
      edit_msg5->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg5->align(FL_ALIGN_LEFT);
      edit_msg5->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg5
    { label_6 = new Fl_Input2(30, 178, 50, 25, _("6:"));
      label_6->box(FL_DOWN_BOX);
      label_6->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_6->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_6->labeltype(FL_NORMAL_LABEL);
      label_6->labelfont(0);
      label_6->labelsize(14);
      label_6->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_6->align(FL_ALIGN_LEFT);
      label_6->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_6
    { edit_msg6 = new Fl_Input2(85, 178, 375, 25);
      edit_msg6->box(FL_DOWN_BOX);
      edit_msg6->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg6->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg6->labeltype(FL_NORMAL_LABEL);
      edit_msg6->labelfont(0);
      edit_msg6->labelsize(14);
      edit_msg6->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg6->align(FL_ALIGN_LEFT);
      edit_msg6->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg6
    { label_7 = new Fl_Input2(30, 207, 50, 25, _("7:"));
      label_7->box(FL_DOWN_BOX);
      label_7->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_7->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_7->labeltype(FL_NORMAL_LABEL);
      label_7->labelfont(0);
      label_7->labelsize(14);
      label_7->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_7->align(FL_ALIGN_LEFT);
      label_7->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_7
    { edit_msg7 = new Fl_Input2(85, 207, 375, 25);
      edit_msg7->box(FL_DOWN_BOX);
      edit_msg7->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg7->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg7->labeltype(FL_NORMAL_LABEL);
      edit_msg7->labelfont(0);
      edit_msg7->labelsize(14);
      edit_msg7->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg7->align(FL_ALIGN_LEFT);
      edit_msg7->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg7
    { label_8 = new Fl_Input2(30, 235, 50, 25, _("8:"));
      label_8->box(FL_DOWN_BOX);
      label_8->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_8->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_8->labeltype(FL_NORMAL_LABEL);
      label_8->labelfont(0);
      label_8->labelsize(14);
      label_8->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_8->align(FL_ALIGN_LEFT);
      label_8->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_8
    { edit_msg8 = new Fl_Input2(85, 235, 375, 25);
      edit_msg8->box(FL_DOWN_BOX);
      edit_msg8->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg8->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg8->labeltype(FL_NORMAL_LABEL);
      edit_msg8->labelfont(0);
      edit_msg8->labelsize(14);
      edit_msg8->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg8->align(FL_ALIGN_LEFT);
      edit_msg8->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg8
    { label_9 = new Fl_Input2(30, 264, 50, 25, _("9:"));
      label_9->box(FL_DOWN_BOX);
      label_9->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_9->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_9->labeltype(FL_NORMAL_LABEL);
      label_9->labelfont(0);
      label_9->labelsize(14);
      label_9->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_9->align(FL_ALIGN_LEFT);
      label_9->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_9
    { edit_msg9 = new Fl_Input2(85, 264, 375, 25);
      edit_msg9->box(FL_DOWN_BOX);
      edit_msg9->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg9->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg9->labeltype(FL_NORMAL_LABEL);
      edit_msg9->labelfont(0);
      edit_msg9->labelsize(14);
      edit_msg9->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg9->align(FL_ALIGN_LEFT);
      edit_msg9->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg9
    { label_10 = new Fl_Input2(30, 293, 50, 25, _("10:"));
      label_10->box(FL_DOWN_BOX);
      label_10->color((Fl_Color)FL_BACKGROUND2_COLOR);
      label_10->selection_color((Fl_Color)FL_SELECTION_COLOR);
      label_10->labeltype(FL_NORMAL_LABEL);
      label_10->labelfont(0);
      label_10->labelsize(14);
      label_10->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      label_10->align(FL_ALIGN_LEFT);
      label_10->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_10
    { edit_msg10 = new Fl_Input2(85, 293, 375, 25);
      edit_msg10->box(FL_DOWN_BOX);
      edit_msg10->color((Fl_Color)FL_BACKGROUND2_COLOR);
      edit_msg10->selection_color((Fl_Color)FL_SELECTION_COLOR);
      edit_msg10->labeltype(FL_NORMAL_LABEL);
      edit_msg10->labelfont(0);
      edit_msg10->labelsize(14);
      edit_msg10->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      edit_msg10->align(FL_ALIGN_LEFT);
      edit_msg10->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg10
    { btn_done_edit = new Fl_Button(535, 292, 56, 26, _("Done"));
      btn_done_edit->callback((Fl_Callback*)cb_btn_done_edit);
    } // Fl_Button* btn_done_edit
    { btn_cancel_edit = new Fl_Button(465, 263, 65, 26, _("Cancel"));
      btn_cancel_edit->callback((Fl_Callback*)cb_btn_cancel_edit);
    } // Fl_Button* btn_cancel_edit
    { btn_apply_edit = new Fl_Button(465, 292, 65, 26, _("Apply"));
      btn_apply_edit->callback((Fl_Callback*)cb_btn_apply_edit);
    } // Fl_Button* btn_apply_edit
    { new Fl_Box(201, 9, 223, 19, _("Message Text"));
    } // Fl_Box* o
    { new Fl_Box(12, 8, 84, 23, _("Msg Label"));
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(464, 4, 65, 252);
      o->box(FL_ENGRAVED_FRAME);
      { new Fl_Box(469, 7, 54, 20, _("Tags"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 36, 55, 20, _("<CLL>"));
        o->tooltip(_("Your call"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 56, 55, 20, _("<QTH>"));
        o->tooltip(_("Your qth"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 76, 55, 20, _("<LOC>"));
        o->tooltip(_("Your location"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 96, 55, 20, _("<OPR>"));
        o->tooltip(_("Your name"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 115, 55, 20, _("<STA>"));
        o->tooltip(_("Other stations callsign"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 134, 55, 20, _("<NAM>"));
        o->tooltip(_("Other stations name"));
      } // Fl_Box* o
      { new Fl_Box(469, 208, 55, 20);
      } // Fl_Box* o
      { new Fl_Box(469, 154, 55, 20);
      } // Fl_Box* o
      { new Fl_Box(469, 155, 55, 20);
      } // Fl_Box* o
      { new Fl_Box(469, 153, 55, 20);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 151, 55, 20, _("<#>"));
        o->tooltip(_("Serial OUT"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 170, 55, 20, _("<+>"));
        o->tooltip(_("Increment serial #"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 189, 55, 20, _("<->"));
        o->tooltip(_("Decrement serial #"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 208, 55, 20, _("<LOG>"));
        o->tooltip(_("Decrement serial #"));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(529, 4, 65, 252);
      o->box(FL_ENGRAVED_FRAME);
      { new Fl_Box(532, 7, 59, 20, _("ProSign"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 36, 60, 20, _("\" RR"));
        o->tooltip(_(".-..-."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 56, 60, 20, _("$ SX"));
        o->tooltip(_("...-..-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 75, 60, 20, _("\' WG"));
        o->tooltip(_(".----."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 94, 60, 20, _("( KN"));
        o->tooltip(_("-.--."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 113, 60, 20, _(") KK"));
        o->tooltip(_("-.--.-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 132, 60, 20, _("+ AR"));
        o->tooltip(_(".-.-."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 151, 60, 20, _("< AR"));
        o->tooltip(_(".-.-."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 170, 60, 20, _("> SK"));
        o->tooltip(_("...-.-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 189, 60, 20, _("= BT"));
        o->tooltip(_("-...-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 208, 60, 20, _("- DU"));
        o->tooltip(_("-....-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 227, 60, 20, _("@@ AC"));
        o->tooltip(_(".--.-."));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Input2 *txt_cll=(Fl_Input2 *)0;

static void cb_txt_cll(Fl_Input2*, void*) {
  change_txt_cll();
}

Fl_Input2 *txt_opr=(Fl_Input2 *)0;

static void cb_txt_opr(Fl_Input2*, void*) {
  change_txt_opr();
}

Fl_Input2 *txt_qth=(Fl_Input2 *)0;

static void cb_txt_qth(Fl_Input2*, void*) {
  change_txt_qth();
}

Fl_Input2 *txt_loc=(Fl_Input2 *)0;

static void cb_txt_loc(Fl_Input2*, void*) {
  change_txt_loc();
}

Fl_Button *btn_done_op_dialog=(Fl_Button *)0;

static void cb_btn_done_op_dialog(Fl_Button*, void*) {
  cb_done_op_dialog();
}

Fl_Double_Window* make_operator_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(296, 162, _("Operator Setup"));
    w = o;
    { txt_cll = new Fl_Input2(63, 10, 224, 23, _("<CLL>"));
      txt_cll->tooltip(_("Your callsign"));
      txt_cll->box(FL_DOWN_BOX);
      txt_cll->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_cll->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_cll->labeltype(FL_NORMAL_LABEL);
      txt_cll->labelfont(0);
      txt_cll->labelsize(14);
      txt_cll->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_cll->callback((Fl_Callback*)cb_txt_cll);
      txt_cll->align(FL_ALIGN_LEFT);
      txt_cll->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_cll
    { txt_opr = new Fl_Input2(63, 41, 224, 23, _("<OPR>"));
      txt_opr->box(FL_DOWN_BOX);
      txt_opr->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_opr->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_opr->labeltype(FL_NORMAL_LABEL);
      txt_opr->labelfont(0);
      txt_opr->labelsize(14);
      txt_opr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_opr->callback((Fl_Callback*)cb_txt_opr);
      txt_opr->align(FL_ALIGN_LEFT);
      txt_opr->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_opr
    { txt_qth = new Fl_Input2(63, 72, 224, 23, _("<QTH>"));
      txt_qth->tooltip(_("Your QTH"));
      txt_qth->box(FL_DOWN_BOX);
      txt_qth->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_qth->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_qth->labeltype(FL_NORMAL_LABEL);
      txt_qth->labelfont(0);
      txt_qth->labelsize(14);
      txt_qth->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_qth->callback((Fl_Callback*)cb_txt_qth);
      txt_qth->align(FL_ALIGN_LEFT);
      txt_qth->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_qth
    { txt_loc = new Fl_Input2(63, 103, 224, 23, _("<LOC>"));
      txt_loc->tooltip(_("Your locator"));
      txt_loc->box(FL_DOWN_BOX);
      txt_loc->color((Fl_Color)FL_BACKGROUND2_COLOR);
      txt_loc->selection_color((Fl_Color)FL_SELECTION_COLOR);
      txt_loc->labeltype(FL_NORMAL_LABEL);
      txt_loc->labelfont(0);
      txt_loc->labelsize(14);
      txt_loc->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      txt_loc->callback((Fl_Callback*)cb_txt_loc);
      txt_loc->align(FL_ALIGN_LEFT);
      txt_loc->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_loc
    { btn_done_op_dialog = new Fl_Button(204, 133, 70, 20, _("Done"));
      btn_done_op_dialog->callback((Fl_Callback*)cb_btn_done_op_dialog);
    } // Fl_Button* btn_done_op_dialog
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Input *txt_serial_nbr=(Fl_Input *)0;

static void cb_txt_serial_nbr(Fl_Input*, void*) {
  serial_nbr();
}

Fl_Check_Button *btn_zeros=(Fl_Check_Button *)0;

static void cb_btn_zeros(Fl_Check_Button*, void*) {
  zeros();
}

Fl_Input *txt_freq=(Fl_Input *)0;

Fl_Check_Button *btn_dups=(Fl_Check_Button *)0;

static void cb_btn_dups(Fl_Check_Button*, void*) {
  dups();
}

Fl_Input *txt_time_span=(Fl_Input *)0;

static void cb_txt_time_span(Fl_Input*, void*) {
  time_span();
}

Fl_Button *btn_close_contest=(Fl_Button *)0;

static void cb_btn_close_contest(Fl_Button*, void*) {
  close_contest();
}

Fl_Double_Window* make_contest_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(600, 65, _("Contest"));
    w = o;
    { Fl_Group* o = new Fl_Group(2, 2, 596, 60, _("Contest"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { txt_serial_nbr = new Fl_Input(125, 6, 60, 24, _("Next #"));
        txt_serial_nbr->tooltip(_("Next serial number to be sent"));
        txt_serial_nbr->type(2);
        txt_serial_nbr->callback((Fl_Callback*)cb_txt_serial_nbr);
      } // Fl_Input* txt_serial_nbr
      { Fl_Check_Button* o = btn_zeros = new Fl_Check_Button(368, 11, 70, 15, _("Leading zeros"));
        btn_zeros->tooltip(_("Send nbr as 0nn if < 100"));
        btn_zeros->down_box(FL_DOWN_BOX);
        btn_zeros->callback((Fl_Callback*)cb_btn_zeros);
        o->value(progStatus.zeros);
      } // Fl_Check_Button* btn_zeros
      { txt_freq = new Fl_Input(237, 6, 120, 24, _("Freq:"));
        txt_freq->tooltip(_("Frequency (KHz preferred)\nBlank = don\'t care"));
      } // Fl_Input* txt_freq
      { Fl_Check_Button* o = btn_dups = new Fl_Check_Button(498, 11, 70, 15, _("Ck Dups"));
        btn_dups->tooltip(_("Check for duplicates"));
        btn_dups->down_box(FL_DOWN_BOX);
        btn_dups->callback((Fl_Callback*)cb_btn_dups);
        o->value(progStatus.dups);
      } // Fl_Check_Button* btn_dups
      { txt_time_span = new Fl_Input(124, 33, 60, 24, _("Time Span"));
        txt_time_span->tooltip(_("Min\'s allowed between dups\nZero = disallowed"));
        txt_time_span->type(2);
        txt_time_span->callback((Fl_Callback*)cb_txt_time_span);
      } // Fl_Input* txt_time_span
      { btn_close_contest = new Fl_Button(506, 34, 70, 20, _("Close"));
        btn_close_contest->callback((Fl_Callback*)cb_btn_close_contest);
      } // Fl_Button* btn_close_contest
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}
